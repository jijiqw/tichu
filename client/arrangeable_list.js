// Generated by CoffeeScript 1.6.3
(function() {
  var ArrangeableList, EventManager, assert, get_pos, set_pos;

  EventManager = (function() {
    function EventManager() {
      this._listeners = [];
    }

    EventManager.prototype.register = function(src, evt, listener) {
      src.on(evt, listener);
      return this._listeners.push([src, evt, listener]);
    };

    EventManager.prototype.unregister_all = function() {
      var evt, listener, src, _i, _len, _ref, _ref1;
      _ref = this._listeners;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], src = _ref1[0], evt = _ref1[1], listener = _ref1[2];
        src.off(evt, listener);
      }
      return this._listeners = [];
    };

    return EventManager;

  })();

  assert = function(statement, mesg) {
    if (!statement) {
      throw new Error("Assertion error: " + mesg);
    }
  };

  get_pos = function(elt) {
    var dom_elt, lx, ly;
    dom_elt = elt[0];
    lx = ly = 0;
    while (dom_elt != null) {
      lx += dom_elt.offsetLeft;
      ly += dom_elt.offsetTop;
      dom_elt = dom_elt.offsetParent;
    }
    return [lx, ly];
  };

  set_pos = function(elt, x, y) {
    return elt.css({
      top: y,
      left: x
    });
  };

  ArrangeableList = (function() {
    var DEFAULT_ZINDEX, ITEM_STYLES;

    DEFAULT_ZINDEX = 20;

    ITEM_STYLES = {
      position: 'absolute',
      '-moz-user-select': '-moz-none',
      '-khtml-user-select': 'none',
      '-webkit-user-select': 'none',
      '-ms-user-select': 'none',
      'user-select': 'none'
    };

    function ArrangeableList(dims, list) {
      var elt, idx, _i, _len, _ref, _ref1;
      this.dims = dims;
      this.list = list != null ? list : [];
      this._zindex = (_ref = this.dims.zindex) != null ? _ref : DEFAULT_ZINDEX;
      this._elt = ($('<div>')).height(this.dims.height).css('position', 'relative');
      _ref1 = this.list;
      for (idx = _i = 0, _len = _ref1.length; _i < _len; idx = ++_i) {
        elt = _ref1[idx];
        this.insert(idx, elt);
      }
      this._dragging = null;
      this._orig_idx = null;
      this._placeholder_idx = null;
      this._click_evt_mgr = new EventManager;
    }

    ArrangeableList.prototype.is_dragging = function() {
      return this._dragging != null;
    };

    ArrangeableList.prototype.render = function() {
      var idx, item, offset, _i, _len, _ref;
      offset = 0;
      _ref = this.list;
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        item = _ref[idx];
        if (item != null) {
          set_pos(item, offset, 0);
        }
        offset += this.get_width(idx);
      }
      return this._elt.width(offset);
    };

    ArrangeableList.prototype.get_width = function(idx) {
      var item;
      item = this.list[idx];
      if (item != null) {
        return item.width();
      }
      assert(idx === this._placeholder_idx);
      return this._dragging.width();
    };

    ArrangeableList.prototype.get_nearest_idx = function(x, y) {
      var idx, item, offset, _i, _len, _ref;
      if (y < 0 || y > 2 * this.dims.height) {
        return null;
      }
      if (x < 0) {
        return null;
      }
      offset = 0;
      _ref = this.list;
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        item = _ref[idx];
        if (item == null) {
          assert(idx === this._placeholder_idx);
        }
        offset += this.get_width(idx);
        if (x < offset) {
          return idx;
        }
      }
      return null;
    };

    ArrangeableList.prototype._onmousemove = function(evt) {
      var cont_x, cont_y, half_h, half_w, new_placeholder, x, y, _ref, _ref1;
      if (this._dragging == null) {
        return;
      }
      _ref = get_pos(this._elt), cont_x = _ref[0], cont_y = _ref[1];
      _ref1 = [evt.pageX - cont_x, evt.pageY - cont_y], x = _ref1[0], y = _ref1[1];
      half_w = Math.floor(this._dragging.width() / 2);
      half_h = Math.floor(this.dims.height / 2);
      set_pos(this._dragging, x - half_w, y - half_h);
      new_placeholder = this.get_nearest_idx(x, y);
      if (new_placeholder == null) {
        if (this._placeholder_idx != null) {
          this.list.splice(this._placeholder_idx, 1);
          this._placeholder_idx = null;
        }
      } else {
        if (this._placeholder_idx != null) {
          new_placeholder -= (this._placeholder_idx < new_placeholder ? 1 : 0);
          this.list.splice(this._placeholder_idx, 1);
        }
        this.list.splice(new_placeholder, 0, null);
        this._placeholder_idx = new_placeholder;
      }
      this.render();
      return false;
    };

    ArrangeableList.prototype.set_dragging = function(elt, idx) {
      if (this._dragging != null) {
        throw new Error("already dragging");
      }
      this._dragging = elt;
      this._dragging.css('z-index', this._zindex + 1);
      this._click_evt_mgr.register($(window), 'mousemove', this._onmousemove.bind(this));
      this._click_evt_mgr.register($(window), 'mouseup', this.unset_dragging.bind(this));
      this._orig_idx = idx;
      this._placeholder_idx = idx;
      return this.list[idx] = null;
    };

    ArrangeableList.prototype.unset_dragging = function() {
      if (this._dragging == null) {
        throw new Error("not currently dragging");
      }
      this._dragging.css('z-index', this._zindex);
      if (this._placeholder_idx != null) {
        this.list[this._placeholder_idx] = this._dragging;
      } else {
        this.list.splice(this._orig_idx, 0, this._dragging);
      }
      this._dragging = this._orig_idx = this._placeholder_idx = null;
      this._click_evt_mgr.unregister_all();
      return this.render();
    };

    ArrangeableList.prototype.insert = function(before_idx, elt) {
      var container, target,
        _this = this;
      assert(before_idx <= this.list.length);
      container = ($('<div>')).append(elt);
      container.css(ITEM_STYLES);
      container.css('z-index', this._zindex);
      container.mousedown(function() {
        var idx, item, _i, _len, _ref;
        _ref = _this.list;
        for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
          item = _ref[idx];
          if (item === container) {
            _this.set_dragging(container, idx);
            return;
          }
        }
      });
      if (before_idx === this.list.length) {
        this._elt.append(container);
      } else {
        target = this._elt.children().get(before_idx);
        assert(target != null);
        container.insertBefore(target);
      }
      this.list.splice(before_idx, 0, container);
      return this.render();
    };

    ArrangeableList.prototype.remove = function(elt) {
      var idx, list_elt, _i, _len, _ref;
      assert(elt != null);
      if (elt === this._dragging) {
        this.unset_dragging();
      }
      _ref = this.list;
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        list_elt = _ref[idx];
        if (elt === list_elt) {
          this.list.splice(idx, 1);
          break;
        }
      }
      elt.detach();
      return this.render();
    };

    ArrangeableList.prototype.length = function() {
      return this.list.length;
    };

    ArrangeableList.prototype.elt = function() {
      return this._elt;
    };

    return ArrangeableList;

  })();

  window.ArrangeableList = ArrangeableList;

}).call(this);
